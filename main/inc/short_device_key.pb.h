/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 at Fri Feb 22 19:16:02 2019. */

#ifndef PB_BLOCKCHAINCORE_SHORT_DEVICE_KEY_PB_H_INCLUDED
#define PB_BLOCKCHAINCORE_SHORT_DEVICE_KEY_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _BlockchainCore_PublicKey {
    /*pb_byte_t*/char mm[32];
/* @@protoc_insertion_point(struct:BlockchainCore_PublicKey) */
} BlockchainCore_PublicKey;

typedef struct _BlockchainCore_ShortDeviceKey {
    BlockchainCore_PublicKey device_key_id;
    /*pb_byte_t*/ char authentication_key[32];
    /*pb_byte_t*/ char biometrical_key[128];
    int32_t wearout;
    char application_data[128];
    char shedule[128];
/* @@protoc_insertion_point(struct:BlockchainCore_ShortDeviceKey) */
} BlockchainCore_ShortDeviceKey;

/* Default values for struct fields */

/* Initializer values for message structs */
#define BlockchainCore_PublicKey_init_default    {{0}}
#define BlockchainCore_ShortDeviceKey_init_default {BlockchainCore_PublicKey_init_default, {0}, {0}, 0, "", ""}
#define BlockchainCore_PublicKey_init_zero       {{0}}
#define BlockchainCore_ShortDeviceKey_init_zero  {BlockchainCore_PublicKey_init_zero, {0}, {0}, 0, "", ""}

/* Field tags (for use in manual encoding/decoding) */
#define BlockchainCore_PublicKey_mm_tag          1
#define BlockchainCore_ShortDeviceKey_device_key_id_tag 1
#define BlockchainCore_ShortDeviceKey_authentication_key_tag 2
#define BlockchainCore_ShortDeviceKey_biometrical_key_tag 3
#define BlockchainCore_ShortDeviceKey_wearout_tag 4
#define BlockchainCore_ShortDeviceKey_application_data_tag 5
#define BlockchainCore_ShortDeviceKey_shedule_tag 6

/* Struct field encoding specification for nanopb */
extern const pb_field_t BlockchainCore_PublicKey_fields[2];
extern const pb_field_t BlockchainCore_ShortDeviceKey_fields[7];

/* Maximum encoded size of messages (where known) */
#define BlockchainCore_PublicKey_size            34
#define BlockchainCore_ShortDeviceKey_size       474

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SHORT_DEVICE_KEY_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
